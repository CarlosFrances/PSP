VALIDAR DNI

def validar_dni(dni):
    tabla_asignacion = 'TRWAGMYFPDXBNJZSQVHLCKE'

    # Comprobamos la longitud del DNI
    if len(dni) != 9:
        return False

    # Comprobamos que los primeros 8 caracteres sean dígitos
    if not dni[:8].isdigit():
        return False

    # Comprobamos que el último caracter sea una letra mayúscula
    if not dni[-1].isupper():
        return False

    # Calculamos el resto de la división entre el número formado por los primeros 8 caracteres del DNI y 23
    resto = int(dni[:8]) % 23

    # Comprobamos que la letra del DNI sea la correspondiente según la tabla de asignación
    if tabla_asignacion[resto] != dni[-1]:
        return False

    return True


VALIDAR CORREO ELECTRONICO

import re

def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None




Función de POST||GET

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # process the POST request here
        data = request.form['data']
        # pass the data to the template
        return render_template('result.html', data=data)
    else:
        # return the form to submit data
        return render_template('form.html')



APUNTES

## listas
my_list = list()
my_other_list = []

print(len(my_list))

my_list = [35, 24, 62, 52, 30, 30, 17]
my_other_list = [35, 1.77, "Brais", "Moure"]
my_other_list.insert(1,"Azul")
print(my_other_list)
my_other_list.append("MoureDev")
print(my_other_list)
my_list.remove(30)
print(my_other_list)
my_other_list[1] = "azul"
my_list.clear()
my_other_list = my_list.copy
my_list.reverse()
my_list.sort()

## TUPLAS inmutables
my_tuple = tuple()
my_other_tuple = ()
my_tuple = (35,1.77,"Brais", "Moure")
my_tuple.count(35)
## DICCIONARIOS
my_dict = dict()
my_other_dict = {}

my_other_dict = {
    "Nombre": "kike",
    "Apellido": "Gar",
    "Lenguajes":{"Python","Kotlin"},
    1:"Python"
}

print(my_other_dict["Nombre"])
my_other_dict["Nombre"] = "Pedro"
print(my_other_dict["Nombre"])
my_other_dict["Calle"] = "Calle Kike"
print(my_other_dict)
del my_other_dict["Calle"]
print(my_other_dict.items())
print(my_other_dict.keys())
print(my_other_dict.values())
#print(my_other_dict.fromkeys())

my_other_dict = dict.fromkeys(("Nombre",1))

##bucles



mi_numero = 0
while mi_numero < 10:
    print(mi_numero)
    mi_numero+=1

for element in my_list:
    print(element)
    if element == "Edad":
        break
    elif element == 1:
        print("elemento vale uno")
    else:
        "Ha finalizado"
##FUNCIONES
def my_function():
    print("esta es mi funcion")

my_function()

##CLASES
class Person:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
    def walk (self):
        print(self.name + " esta caminando")

my_person = Person("Kike","Garcia")
print(my_person.name)
my_person.walk()



from flask import Flask, request, render_template,jsonify
import re

app = Flask(__name__)
regex_mail = re.compile('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')
def isValid(email):
    if re.fullmatch(regex_mail,email):
        return True
    else:
        return False

class Validaciones:
    REGEXP = "[0-9]{8}[A-Z]"
    DIGITO_CONTROL = "TRWAGMYFPDXBNJZSQVHLCKE"
    INVALIDOS = {"00000000T", "00000001R", "99999999R"}

    def __init__(self):
        pass

    def validar_dni(self, dni: str) -> bool:
        return dni not in self.INVALIDOS and re.match(self.REGEXP, dni) is not None  and dni[8] == self.DIGITO_CONTROL[int(dni[0:8]) % 23]


json={}
usuarios=[{"id":"0","username":"usuario1","password":"As123456","email":"hola@hola.com","dni":"12345678A","premium":False},
                  {"id":"1","username":"usuario2","password":"As123456","email":"hola1@hola.com","dni":"12345678A","premium":False},
                  {"id":"2","username":"usuario3","password":"As123456","email":"hola2@hola.com","dni":"12345678A","premium":False},
                  {"id":"3","username":"usuario4","password":"As123456","email":"hola3@hola.com","dni":"12345678A","premium":False}]

json["usuarios"]=usuarios

@app.route("/login", methods=['GET'])
def inicio():
    return render_template("login.html")

@app.route("/login", methods=['POST'])
def login():
    finder = False
    username = request.form("username")
    password = request.form("password")
    for i in usuarios:
        if i["username"]==username:
            finder = True
            if i["password"]==password:
                return "LOGIN CORRECTO"
            else:
                return "404" #PROGRAMAR ERROR
    if not finder:
        return "404"

@app.route("/get-user",methods=['GET'])
def get_user():
    id = request.args.get("id",str,None)
    for i in usuarios:
        if i["id"]==id:
            return i
    return "404"

@app.route("/new-user", methods=['GET'])
def inicio_registro():
    return render_template("register.html")

@app.route("/new-user", methods=['POST'])
def registro():
    username = request.form("username")
    for i in usuarios:
        if i["username"]==username or i["email"]==email:
            return "error ya existe"
    password = request.form("password")
    email = request.form("email")
    if not isValid(email):
        return "Formato correo incorrecto"
    dni = request.form("dni")
    if not Validaciones().validar_dni(dni):
        return "Formato dni incorrecto"
    premium = request.form("premium")
    usuarios.append({"id":len(usuarios),"username":username,"password":password,"email":email,"dni":dni,"premium":premium})
    json['usuarios']=usuarios
    return jsonify(json)

@app.route("/get-all-users")
def get_usuarios():
    return jsonify(json)




